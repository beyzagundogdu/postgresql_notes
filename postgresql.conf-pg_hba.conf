1. pg_hba.conf ve Bağlantı Yetkilendirmesi
	•	pg_hba.conf Nedir?
PostgreSQL’e hangi kullanıcının, hangi IP adreslerinden, hangi veritabanına, hangi kimlik doğrulama yöntemiyle bağlanabileceğini tanımlayan dosyadır.
Bağlantı türü (local, host, hostssl, vb.), veritabanı, kullanıcı, IP adresi (veya ağ bloğu) ve doğrulama yöntemi (trust, md5, scram-sha-256, vb.) satır satır tanımlanır.
	
  •	Örnek Satır
host    all    all    192.168.0.0/24    scram-sha-256

Bu satırla, 192.168.0.x IP aralığından gelen tüm kullanıcıların (all), tüm veritabanlarına (all) bağlanırken SCRAM-SHA-256 yöntemiyle doğrulanması sağlanır.

	•	Sıralama
PostgreSQL, bağlantı isteği geldiğinde satırları sırayla kontrol eder ve ilk eşleşen satırı uygular. Dolayısıyla kuralların sırası çok önemlidir.
	•	pg_ctl reload
pg_hba.conf üzerinde değişiklik yaptıktan sonra pg_ctl reload (veya systemctl reload postgresql) komutuyla PostgreSQL’i yeniden başlatmadan konfigürasyonu yeniden yükleyebilirsiniz. Bazı parametreler için tam restart gerekebilir ama genelde pg_hba.conf değişikliklerinde reload yeterlidir.


2. IPv4 – IPv6 Bağlantıları ve host Tipi
	•	host: TCP/IP üzerinden yapılan (uzak ya da yerel IP) bağlantıları kapsar.
	•	IPv4 Örneği: 192.168.1.0/24, 127.0.0.1/32
	•	IPv6 Örneği: ::1/128, ::/0
	
  •	Aynı satır hem IPv4 hem IPv6’yı aynı anda kapsamaz; ikisi için ayrı satırlar gerekebilir. Örneğin:
host    all   all   0.0.0.0/0    scram-sha-256
host    all   all   ::/0         scram-sha-256



3. Kimlik Doğrulama Yöntemleri
	•	trust: Parola sormadan kabul. Geliştirme/test ortamları dışında tehlikelidir.
	•	md5: Parola MD5 hash ile saklanır/doğrulanır.
	•	scram-sha-256: Daha modern ve güvenli. PostgreSQL 10+ sürümlerinde önerilir.
	•	peer: local tipinde, OS kullanıcı adıyla PostgreSQL kullanıcı adı eşleşirse parola sormadan kabul.
	•	password: Düz metin parola doğrulaması (SSL olmadan güvenli değil).
	•	reject: Bağlantıyı reddeder.
	•	Diğer: ldap, radius, gss, sspi, vb. harici doğrulama yöntemleri.

  scram-sha-256 vs. md5
	•	md5: Eski bir yöntem, saldırılara karşı daha zayıf.
	•	scram-sha-256: Daha güvenli “challenge–response” mekanizması, salted-hash ve iteration kullanır.
	•	Neden Tercih Edilir?: Parola hiçbir zaman ağda düz veya MD5 olarak görünmez, kırılması zor.


4. authentication_timeout
	•	Tanım: Bir istemci bağlantısında, kimlik doğrulama (parola girme, challenge-response vb.) işleminin kaç saniye içinde tamamlanması gerektiğini belirler.
	•	Örnek: authentication_timeout = 60 (varsayılan genelde 1 dakikadır).
	•	Süre aşılırsa bağlantı reddedilir, böylece saldırganın veya geç cevap veren bir istemcinin kaynakları bloke etmesi önlenir.


5. password_encryption
	•	Amaç: Kullanıcı/rol parolalarının hangi formatta saklanacağını belirler (yeni veya değiştirilmiş parolalar için geçerlidir).
	•	Değerler: md5 veya scram-sha-256.
	•	Güncel PostgreSQL’de scram-sha-256 önerilir.
	•	Eski parolalar md5 kalabilir; kullanıcı parolasını değiştirince yeni ayar devreye girer.


6. SSL (ssl = on/off)
	•	SSL/TLS Nedir?: Sunucu-istemci arasındaki trafiği şifreleyerek veri güvenliğini sağlar.
	•	ssl = on: PostgreSQL, sertifika (server.crt), anahtar (server.key) gibi dosyalarla şifreli bağlantıları kabul eder.
	•	ssl = off: Tüm bağlantılar “plaintext” olarak akar (güvenli değil).
	•	Neden Kullanılır?: Parola güvenliği, veri gizliliği, regülasyon uyumluluğu.
	•	Aktifleştirme: postgresql.conf içinde ssl=on + sertifika ayarları + sunucuya restart gerekir.


7. huge_pages
	•	Nedir?: 
    İşletim sistemindeki “büyük sayfa (large page)” desteğini PostgreSQL’in kullanıp kullanmayacağını belirler.
	•	Seçenekler:
	•	off → Kullanmaz.
	•	try → Varsa kullanır, yoksa normal devam eder.
	•	on → Kesinlikle kullanmak ister, yoksa PostgreSQL başlatılmaz.
	•	Amaç: TLB (Translation Lookaside Buffer) miss oranını azaltarak bellek yoğun iş yüklerinde performans artışı elde etmek.
     •	TLB: CPU içindeki, adres çevirilerini hızlandıran küçük ama çok hızlı bir önbellek.
  	 •	TLB Miss: CPU’nun ihtiyacı olan sayfa çevirisinin TLB’de bulunamaması. Bunun sonucu ek bellek erişimi yapılır, yavaşlatır.
	   •	Huge Pages: Sayfa boyutunu büyüterek TLB’de saklanması gereken giriş sayısını azaltır, TLB miss oranını düşürerek performans arttırabilir.
	•	Dikkat: OS düzeyinde “huge pages” konfigüre edilmelidir, aksi hâlde sunucu açılmaz (on durumda).


8. temp_buffers
	•	Tanım: Oturum başına geçici tablolar (temp tables) için ayrılan bellek tamponu boyutu.
	•	Varsayılan: Çoğunlukla 8MB (sürüm ve dağıtıma göre).
	•	Nasıl Çalışır?:
    Bir oturum bir temp table oluşturduğunda, bu tabloyun veri blokları temp_buffers alanında saklanır.
	•	Dikkat: Çok sayıda eşzamanlı oturum varsa fazla bellek tüketimine neden olabilir.


9. work_mem
	•	Tanım: Bir sorgudaki sıralama (sort), hash join, hash aggregate vb. bellek tüketen işlemlerin kullanabileceği geçici bellek miktarı.
	•	Her İşlem İçin: Aynı sorguda birden fazla işlem varsa her biri work_mem kadar bellek kullanabilir. 
    Eşzamanlı sorgu sayısı da eklenince bellek tüketimi çok artabilir.
	•	Ayarlama:
	•	Düşük work_mem = Daha az bellek tüketimi ama büyük veri sıralamaları disk’e yazıldığı için yavaş olabilir.
	•	Yüksek work_mem = Daha hızlı sorgular (disk I/O az), ama aşırı bellek tüketme riski.
	•	Scope:
	•	Global (postgresql.conf),
	      Çoğu kullanıcı/sorgu için uygun ortak bir değer yeterliyse.
		    “Sunucu yöneticisi” bakışı: “Tüm sistemde work_mem = 16MB, bence çoğu işlem için bu ideal.”
	•	Rol bazında (ALTER ROLE ... SET work_mem),
      	Bazı kullanıcılar çok büyük sorgular, analitik raporlar çalıştırıyor → onlara daha yüksek bellek ver.
	      Bazı kullanıcılar minimal bellekle sınırlandırılsın, sistem çökmesin.
	•	Oturum içinde (SET work_mem = ...).
        Anlık denemeler, testler.
	      Çok özel bir sorguyu hızlandırmak için “Ben tek seferlik 128MB kullanayım” diyebilirsiniz. Oturum bitince varsayılan değere döner.



10. maintenance_work_mem
	•	Tanım: Bakım operasyonları (VACUUM, CREATE INDEX, REINDEX, CLUSTER, ALTER TABLE vb.) sırasında kullanılabilecek bellek miktarı.
      VACUUM: Silinen veya güncellenen satırların bıraktığı boş alanı geri kazanır ve tablo istatistiklerini günceller.
      CREATE INDEX: Belirli sütun(lar) üzerinde hızlı erişim için yeni bir indeks oluşturur.
      REINDEX: Bozulmuş veya şişmiş bir indeksi siler ve sıfırdan yeniden oluşturur.
      CLUSTER: Bir tabloyu belirli bir indeks sırasına göre fiziksel olarak yeniden düzenler.
      ALTER TABLE: Mevcut tablonun yapısını (sütunlar, isim, vb.) değiştirmek için kullanılır.
	•	Farkı: work_mem sıradan sorgular içindir, maintenance_work_mem ise büyük veri işleyen bakım görevlerine özeldir.
	•	Neden Yüksek Tutarız?: 
    İndeks oluşturma, vacuum vb. bazen büyük tablolarda çok veri işleyebilir; bellek ayırmak disk I/O’yu azaltır ve işlemi hızlandırır.
	•	Risk: Çok yüksek ayarlarsanız ve eşzamanlı birkaç büyük bakım işlemi çalışırsa bellek baskısı olabilir.


11. archive_mode ve archive_command
	•	WAL Arşivleme: 
    PostgreSQL’de archive_mode = on yaptığınızda, WAL segmentleri (transaction log dosyaları) archive_command ile belirttiğiniz bir yola veya sistem komutuyla başka bir ortama kopyalanır.
	
  •	archive_mode = on diyerek PostgreSQL’e “Her WAL dosyasını (transaction log) bitirdiğinde, onu bir kopya olarak güvenli bir yerde sakla.” demiş oluyoruz.
	•	archive_command ise “Bu WAL dosyası tam olarak nasıl ve nereye kopyalanacak?” sorusunun cevabıdır.
  
  •	Neden?:
	•	PITR (Point-In-Time Recovery): Ana yedeğin (base backup) yanına tüm WAL dosyalarını koyarsanız istediğiniz tarihe kadar geri dönebilirsiniz.
	•	Replikasyon: Geciken standby’lar arşivlerden eksik WAL’ları çekebilir.
	
  •	archive_command Örnek:
   archive_mode = on
   archive_command = 'cp %p /mnt/server/archives/%f'

  %p → WAL segmentinin tam yolu, %f → dosya adı. Komut exit 0 döndürmeli ki PostgreSQL başarılı saysın.


12. restore_command
	•	Amaç: Arşivden çekilmesi gereken bir WAL segmentini PostgreSQL’e nasıl getireceğinizi tanımlar.
	•	Kullanım Alanı:
	•	Kurtarma (recovery) ya da standby replikasyon aşamasında.
       Kurtarma (recovery): Yedekten geri dönerken arşivlenmiş WAL dosyalarını yükleyip verilere yeniden işleyerek veritabanını onarmak veya istenen zamana geri döndürmek.
	     Standby Replikasyon: Bir başka sunucunun ana sunucuyu adım adım takip etmesi; eğer geride kalırsa arşivden WAL dosyalarını çekerek güncel duruma yetişmesi.
	
  •	PostgreSQL eksik WAL dosyasına ihtiyaç duyarsa, restore_command ile %f (dosya adı) arşiv konumundan alınıp %p (hedef yol) içine kopyalanır.
  •	Örnek:
    restore_command = 'cp /mnt/server/archives/%f %p'

	•	PITR ve arşiv tabanlı replikasyon senaryolarında elzemdir.


Son Notlar
	1.	Değişikliklerin Uygulanması
	•	Bazı parametreler sadece reload ile etkinleşir (pg_ctl reload, systemctl reload postgresql) ve anlık kesinti olmaz.
	•	Bazıları mutlaka restart ister (listen_addresses, shared_buffers, max_connections, archive_mode, ssl gibi). Restart, tüm bağlantıları kesip sunucuyu yeniden başlatır.
	2.	Bellek Ayarları ve Denge
	•	work_mem, maintenance_work_mem, temp_buffers, huge_pages gibi parametreleri donanım (RAM, CPU) ve iş yükü (eşzamanlı sorgu sayısı, sorgu türü) dikkate alarak ayarlamak gerekir.
	•	Çok yüksek bellek ayarları, veritabanı performansını artırabilir ama sistem genelinde bellek aşımı (OOM) veya yoğun paging riskine de yol açabilir.
	3.	Yedekleme ve Replikasyon
	•	archive_mode, archive_command, restore_command gibi parametreler, kurumsal yedekleme stratejilerinin belkemiğidir. PITR ile istenilen zamana dönebilmek, replikasyon senaryolarında standby’ı senkron tutmak bu ayarlarla sağlanır.
	4.	SSL / Şifreleme / Güvenlik
	•	ssl = on, scram-sha-256 gibi yöntemler, üretim ortamlarında veri ve parola trafiğini korumak için kritik.
	•	md5, trust gibi daha zayıf veya riskli ayarları ancak ihtiyaç duyulan çok özel durumlarda veya gelişim/test ortamlarında tercih etmelisiniz.
